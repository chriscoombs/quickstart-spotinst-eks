{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "EKS cluster and Spotinst Ocean for the EKS nodes (qs-1osj6tpba) License: Apache 2.0 (Please do not remove) Oct,3,201",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Amazon EKS configuration"
                    },
                    "Parameters": [
                        "NewEKS",
                        "EKSName",
                        "EKSVersion",
                        "NewOrExistingRole",
                        "ProfileRole",
                        "NewOrExistingNodesSG",
                        "ExistingNodesSecurityGroupsIds",
                        "ExistingControlPlaneSecurityGroup",
                        "EKSAMIType",
                        "BootstrapArguments"
                    ]
                },
                {
                    "Label": {
                        "default": "Spotinst configuration"
                    },
                    "Parameters": [
                        "AccountID",
                        "AccessToken"
                    ]
                },
                {
                    "Label": {
                        "default": "Ocean configuration"
                    },
                    "Parameters": [
                        "OceanName",
                        "ResourceLimitsCPU",
                        "ResourceLimitsMemory"
                    ]
                },
                {
                    "Label": {
                        "default": "AWS Quick Start configuration"
                    },
                    "Parameters": [
                        "QSS3BucketName",
                        "QSS3KeyPrefix"
                    ]
                }
            ],
            "ParameterLabels": {
                "OceanName": {
                    "default": "Ocean cluster name"
                },
                "AccessToken": {
                    "default": "Spotinst Access Token"
                },
                "AccountID": {
                    "default": "Spotinst Account ID"
                },
                "VPC": {
                    "default": "VPC"
                },
                "AvailabilityZones": {
                    "default": "Availability Zones"
                },
                "SubnetIds": {
                    "default": "Subnet IDs"
                },
                "KeyName": {
                    "default": "Key pair name"
                },
                "NewOrExistingNodesSG": {
                    "default": "New or existing EKS Nodes Security Group"
                },
                "ExistingNodesSecurityGroupsIds": {
                    "default": "Existing Nodes Security group IDs"
                },
                "ExistingControlPlaneSecurityGroup": {
                    "default": "Control Plane Security group"
                },
                "EKSName": {
                    "default": "EKS name"
                },
                "EKSVersion": {
                    "default": "EKS Version"
                },
                "NewEKS": {
                    "default": "New or existing EKS cluster"
                },
                "NewOrExistingRole": {
                    "default": "New or existing EKS Instance Profile Role"
                },
                "ProfileRole": {
                    "default": "Existing EKS Profile Role ARN"
                },
                "EKSAMIType": {
                    "default": "Regular or GPU EKS AMI"
                },
                "BootstrapArguments": {
                    "default": "Bootstrap Arguments For EKS nodes"
                },
                "ResourceLimitsCPU": {
                    "default": "CPU limit for ocean cluster nodes"
                },
                "ResourceLimitsMemory": {
                    "default": "Memory limit for ocean cluster nodes"
                },
                "QSS3BucketName": {
                    "default": "Quick Start S3 bucket name"
                },
                "QSS3KeyPrefix": {
                    "default": "Quick Start S3 key prefix"
                }
            }
        }
    },
    "Parameters": {
        "OceanName": {
            "Type": "String",
            "Description": "Name of the Elastigroup."
        },
        "AccessToken": {
            "Type": "String",
            "Description": "Spotinst API Token."
        },
        "AccountID": {
            "Type": "String",
            "Description": "Spotinst Account ID."
        },
        "ResourceLimitsCPU": {
            "Type": "Number",
            "Description": "Maximun Amount of CPU cores in the Cluster",
            "Default": "2000"
        },
        "ResourceLimitsMemory": {
            "Type": "Number",
            "Description": "Maximun Amount of Memory (Gib) in the Cluster",
            "Default": "4000"
        },
        "VPC": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "The VPC for the Elastigroup."
        },
        "AvailabilityZones": {
            "Type": "List<AWS::EC2::AvailabilityZone::Name>",
            "Description": "The Availability Zones for the cluster."
        },
        "SubnetIds": {
            "Type": "List<AWS::EC2::Subnet::Id>",
            "Description": "Provde Subnet IDs for the Cluster (Must be from selected VPC"
        },
        "KeyName": {
            "Description": "Provide an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "Must be the name of an existing EC2 KeyPair."
        },
        "ExistingNodesSecurityGroupsIds": {
            "Type": "CommaDelimitedList",
            "Default": "",
            "Description": "A comma-separated list of exsiting nodes security group IDs."
        },
        "NewOrExistingNodesSG": {
            "Type": "String", 
            "Default": "New", 
            "Description": "New or existing EKS Nodes Security Group", 
            "AllowedValues": [
                "New", 
                "Existing"
            ]
        }, 
        "EKSName": {
            "Description": "A name for the Amazon EKS cluster.",
            "Type": "String"
        },
        "EKSVersion": {
            "Description": "Amazon EKS Version.",
            "Type": "String", 
            "AllowedValues": [
                "1.11", 
                "1.10"
            ], 
            "Default": "1.11"
        },
        "NewEKS": {
            "Description": "Use an existing Amazon EKS cluster or create a new one.",
            "Type": "String",
            "AllowedValues": [
                "New Cluster",
                "Existing Cluster"
            ],
            "Default": "New Cluster"
        },
        "NewOrExistingRole": {
            "Type": "String", 
            "Default": "New", 
            "Description": "New Node Instance Profile Role for EKS Nodes existing one", 
            "AllowedValues": [
                "New", 
                "Existing"
            ]
        },
        "EKSAMIType": {
            "Type": "String", 
            "Default": "Regular", 
            "Description": "Use Regaulr or GPU AMI for nodes (GPU AMI Supports only p2 and p3 instance)", 
            "AllowedValues": [
                "Regular", 
                "GPU"
            ]
        }, 
        "ProfileRole": {
            "Type": "String", 
            "Default": "",
            "Description": "If Using an Existing Instance Profile, provide its ARN"
        },
        "BootstrapArguments": {
            "Description": "Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami", 
            "Default": "", 
            "Type": "String"
        },
        "ExistingControlPlaneSecurityGroup": {
            "Type": "String",
            "Default": "",
            "Description": "EKS cluster control plane security group ID (if creating new security group for nodes with existing EKS Cluster)"
        },
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "aws-quickstart",
            "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Default": "quickstart-spotinst-eks/",
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Type": "String"
        }
    },
    "Mappings": {
        "EKSVersionMap": {
            "1.11": {
                "STD": "EKS111", 
                "GPU": "EKS111GPU"
            }, 
            "1.10": {
                "STD": "EKS110", 
                "GPU": "EKS110GPU"
            }
        },
        "AMITypesMap": {
            "Regular": {
                "Type": "STD"
            }, 
            "GPU": {
                "Type": "GPU"
            }
        },
        "AWSAMIRegionMap": {
            "AMI": {
                "EKS111": "amazon-eks-node-1.11-v20", 
                "EKS111GPU": "amazon-eks-gpu-node-1.11-v20", 
                "EKS110": "amazon-eks-node-1.10-v20", 
                "EKS110GPU": "amazon-eks-gpu-node-1.10-v20"
            }, 
            "ap-northeast-1": {
                "EKS111": "ami-0f0e8066383e7a2cb", 
                "EKS111GPU": "ami-036b3969c5eb8d3cf", 
                "EKS110": "ami-06398bdd37d76571d", 
                "EKS110GPU": "ami-0afc9d14b2fe11ad9"
            }, 
            "ap-northeast-2": {
                "EKS111": "ami-0b7baa90de70f683f", 
                "EKS111GPU": "ami-0b7f163f7194396f7", 
                "EKS110": "ami-08a87e0a7c32fa649", 
                "EKS110GPU": "ami-0d75b9ab57bfc8c9a"
            }, 
            "ap-southeast-1": {
                "EKS111": "ami-019966ed970c18502", 
                "EKS111GPU": "ami-093f742654a955ee6", 
                "EKS110": "ami-0ac3510e44b5bf8ef", 
                "EKS110GPU": "ami-0ecce0670cb66d17b"
            }, 
            "ap-southeast-2": {
                "EKS111": "ami-06ade0abbd8eca425", 
                "EKS111GPU": "ami-05e09575123ff498b", 
                "EKS110": "ami-0d2c929ace88cfebe", 
                "EKS110GPU": "ami-03b048bd9d3861ce9"
            }, 
            "eu-central-1": {
                "EKS111": "ami-010caa98bae9a09e2", 
                "EKS111GPU": "ami-0d6f0554fd4743a9d", 
                "EKS110": "ami-08eb700778f03ea94", 
                "EKS110GPU": "ami-000622b1016d2a5bf"
            }, 
            "eu-north-1": {
                "EKS111": "ami-06ee67302ab7cf838", 
                "EKS111GPU": "ami-0b159b75", 
                "EKS110": "ami-068b8a1efffd30eda", 
                "EKS110GPU": "ami-cc149ab2"
            }, 
            "eu-west-1": {
                "EKS111": "ami-01e08d22b9439c15a", 
                "EKS111GPU": "ami-097978e7acde1fd7c", 
                "EKS110": "ami-0de10c614955da932", 
                "EKS110GPU": "ami-0dafd3a1dc43781f7"
            }, 
            "us-east-1": {
                "EKS111": "ami-0c24db5df6badc35a", 
                "EKS111GPU": "ami-0ff0241c02b279f50", 
                "EKS110": "ami-04358410d28eaab63", 
                "EKS110GPU": "ami-0131c0ca222183def"
            }, 
            "us-east-2": {
                "EKS111": "ami-0c2e8d28b1f854c68", 
                "EKS111GPU": "ami-006a12f54eaafc2b1", 
                "EKS110": "ami-0b779e8ab57655b4b", 
                "EKS110GPU": "ami-0abfb3be33c196cbf"
            }, 
            "us-west-2": {
                "EKS111": "ami-0a2abab4107669c1b", 
                "EKS111GPU": "ami-0c9e5e2d8caa9fb5e", 
                "EKS110": "ami-09e1df3bad220af0b", 
                "EKS110GPU": "ami-0ebf0561e61a2be02"
            }
        }
    },
    "Conditions": {
        "CreateEKSCluster": {
            "Fn::Equals": [
                {
                    "Ref": "NewEKS"
                },
                "New Cluster"
            ]
        },
        "NewRole": {
            "Fn::Equals": [
                {
                    "Ref": "NewOrExistingRole"
                }, 
                "New"
            ]
        },
        "NewSG": {
            "Fn::Equals": [
                {
                    "Ref": "NewOrExistingNodesSG"
                }, 
                "New"
            ]
        }
    },
    "Resources": {
        "LambdaStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {
                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/copy_lambda.template"
                },
                "Parameters": {
                    "QSS3BucketName": {
                        "Ref": "QSS3BucketName"
                    },
                    "QSS3KeyPrefix": {
                        "Ref": "QSS3KeyPrefix"
                    }
                }
            }
        },
        "EKSIAMRole": {
            "Condition": "CreateEKSCluster",
            "Type": "AWS::IAM::Role", 
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17", 
                    "Statement": [
                        {
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "eks.amazonaws.com"
                                ]
                            }, 
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                }, 
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy", 
                    "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
                ], 
                "Path": "/", 
                "RoleName": {
                    "Fn::Sub": "${EKSName}-Role"
                }
            }
        },
        "ControlPlaneSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Condition": "CreateEKSCluster", 
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "eks-control-plane-SG"
                    },
                    {
                        "Key": {
                            "Fn::Sub": "kubernetes.io/cluster/${EKSName}"
                        }, 
                        "Value": "owned"
                    }
                ],
                "GroupDescription": "Cluster communication with worker nodes", 
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        }, 
        "EKSCluster": {
            "Type": "AWS::EKS::Cluster", 
            "Condition": "CreateEKSCluster",
            "Properties": {
                "Name": {
                    "Ref": "EKSName"
                }, 
                "Version": {
                    "Ref": "EKSVersion"
                }, 
                "RoleArn": {
                    "Fn::GetAtt": [
                        "EKSIAMRole", 
                        "Arn"
                    ]
                }, 
                "ResourcesVpcConfig": {
                    "SecurityGroupIds": [
                        {
                            "Ref": "ControlPlaneSecurityGroup"
                        }
                    ], 
                    "SubnetIds": { 
                        "Ref": "SubnetIds"
                    }
                }
            }, 
            "DependsOn": [
                "EKSIAMRole",
                "ControlPlaneSecurityGroup"
            ]
        }, 
        "NodeInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile", 
            "Condition": "NewRole", 
            "Properties": {
                "Path": "/", 
                "Roles": [
                    {
                        "Ref": "NodeInstanceRole"
                    }
                ]
            },
            "DependsOn": [
                "NodeInstanceRole"
            ]
        }, 
        "NodeInstanceRole": {
            "Type": "AWS::IAM::Role", 
            "Condition": "NewRole", 
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17", 
                    "Statement": [
                        {
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }, 
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                }, 
                "Path": "/", 
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy", 
                    "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy", 
                    "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
                ]
            }
        },
        "NodeSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Condition": "NewSG",
            "Properties": {
                "GroupDescription": "Security group for all nodes in the cluster", 
                "VpcId": {
                    "Ref": "VPC"
                }, 
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "eks-nodes-SG"
                    },
                    {
                        "Key": {
                            "Fn::Sub": "kubernetes.io/cluster/${EKSName}"
                        }, 
                        "Value": "owned"
                    }
                ]
            }
        }, 
        "NodeSecurityGroupIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Condition": "NewSG", 
            "DependsOn": "NodeSecurityGroup", 
            "Properties": {
                "Description": "Allow node to communicate with each other", 
                "GroupId": {
                    "Ref": "NodeSecurityGroup"
                }, 
                "SourceSecurityGroupId": {
                    "Ref": "NodeSecurityGroup"
                }, 
                "IpProtocol": "-1", 
                "FromPort": 0, 
                "ToPort": 65535
            }
        }, 
        "NodeSecurityGroupFromControlPlaneIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress", 
            "Condition": "NewSG", 
            "DependsOn": "NodeSecurityGroup", 
            "Properties": {
                "Description": "Allow worker Kubelets and pods to receive communication from the cluster control plane", 
                "GroupId": {
                    "Ref": "NodeSecurityGroup"
                }, 
                "SourceSecurityGroupId": {
                    "Fn::If": [
                        "CreateEKSCluster", 
                        {
                            "Ref": "ControlPlaneSecurityGroup"
                        }, 
                        {
                            "Ref": "ExistingControlPlaneSecurityGroup"
                        }
                    ]    
                }, 
                "IpProtocol": "tcp", 
                "FromPort": 1025, 
                "ToPort": 65535
            }
        }, 
        "ControlPlaneEgressToNodeSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroupEgress", 
            "Condition": "NewSG", 
            "DependsOn": "NodeSecurityGroup", 
            "Properties": {
                "Description": "Allow the cluster control plane to communicate with worker Kubelet and pods", 
                "GroupId": {
                    "Fn::If": [
                        "CreateEKSCluster", 
                        {
                            "Ref": "ControlPlaneSecurityGroup"
                        }, 
                        {
                            "Ref": "ExistingControlPlaneSecurityGroup"
                        }
                    ] 
                }, 
                "DestinationSecurityGroupId": {
                    "Ref": "NodeSecurityGroup"
                }, 
                "IpProtocol": "tcp", 
                "FromPort": 1025, 
                "ToPort": 65535
            }
        }, 
        "NodeSecurityGroupFromControlPlaneOn443Ingress": {
            "Type": "AWS::EC2::SecurityGroupIngress", 
            "Condition": "NewSG", 
            "DependsOn": "NodeSecurityGroup", 
            "Properties": {
                "Description": "Allow pods running extension API servers on port 443 to receive communication from cluster control plane", 
                "GroupId": {
                    "Ref": "NodeSecurityGroup"
                }, 
                "SourceSecurityGroupId": {
                    "Fn::If": [
                        "CreateEKSCluster", 
                        {
                            "Ref": "ControlPlaneSecurityGroup"
                        }, 
                        {
                            "Ref": "ExistingControlPlaneSecurityGroup"
                        }
                    ] 
                }, 
                "IpProtocol": "tcp", 
                "FromPort": 443, 
                "ToPort": 443
            }
        }, 
        "ControlPlaneEgressToNodeSecurityGroupOn443": {
            "Type": "AWS::EC2::SecurityGroupEgress", 
            "Condition": "NewSG", 
            "DependsOn": "NodeSecurityGroup", 
            "Properties": {
                "Description": "Allow the cluster control plane to communicate with pods running extension API servers on port 443", 
                "GroupId": {
                    "Fn::If": [
                        "CreateEKSCluster", 
                        {
                            "Ref": "ControlPlaneSecurityGroup"
                        }, 
                        {
                            "Ref": "ExistingControlPlaneSecurityGroup"
                        }
                    ] 
                }, 
                "DestinationSecurityGroupId": {
                    "Ref": "NodeSecurityGroup"
                }, 
                "IpProtocol": "tcp", 
                "FromPort": 443, 
                "ToPort": 443
            }
        }, 
        "ControlPlaneSecurityGroupIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Condition": "NewSG",  
            "DependsOn": "NodeSecurityGroup", 
            "Properties": {
                "Description": "Allow pods to communicate with the cluster API Server", 
                "GroupId": {
                    "Fn::If": [
                        "CreateEKSCluster", 
                        {
                            "Ref": "ControlPlaneSecurityGroup"
                        }, 
                        {
                            "Ref": "ExistingControlPlaneSecurityGroup"
                        }
                    ] 
                }, 
                "SourceSecurityGroupId": {
                    "Ref": "NodeSecurityGroup"
                }, 
                "IpProtocol": "tcp", 
                "ToPort": 443, 
                "FromPort": 443
            }
        },
        "SpotinstOcean": {
            "Type": "Custom::ocean",
            "DependsOn": "LambdaStack",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaStack",
                        "Outputs.SpotinstLambda"
                    ]
                },
                "accessToken": {
                    "Ref": "AccessToken"
                },
                "accountId": {
                    "Ref": "AccountID"
                }, 
                "ocean": {
                    "name": {
                        "Ref": "OceanName"
                    }, 
                    "controllerClusterId": {
                        "Ref": "OceanName"
                    }, 
                    "region": {
                        "Ref": "AWS::Region"
                    }, 
                    "autoScaler": {
                        "isEnabled": true, 
                        "cooldown": 180, 
                        "resourceLimits": {
                            "maxMemoryGib": {
                                "Ref": "ResourceLimitsMemory"
                            }, 
                            "maxVCpu": {
                                "Ref": "ResourceLimitsCPU"
                            }
                        }, 
                        "down": {
                            "evaluationPeriods": 3
                        }, 
                        "headroom": {
                            "cpuPerUnit": 0, 
                            "memoryPerUnit": 0, 
                            "numOfUnits": 0
                        }, 
                        "isAutoConfig": true
                    }, 
                    "capacity": {
                        "minimum": 1, 
                        "maximum": 1000, 
                        "target": 1
                    }, 
                    "strategy": {
                        "spotPercentage": 100, 
                        "fallbackToOd": true, 
                        "utilizeReservedInstances": false
                    }, 
                    "compute": {
                        "subnetIds": {
                            "Ref": "SubnetIds"
                        },
                        "launchSpecification": {
                            "imageId": {
                                "Fn::FindInMap": [
                                    "AWSAMIRegionMap", 
                                    {
                                        "Ref": "AWS::Region"
                                    }, 
                                    {
                                        "Fn::FindInMap": [
                                            "EKSVersionMap", 
                                            {
                                                "Ref": "EKSVersion"
                                            }, 
                                            {
                                                "Fn::FindInMap": [
                                                    "AMITypesMap", 
                                                    {
                                                        "Ref": "EKSAMIType"
                                                    }, 
                                                    "Type"
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }, 
                            "userData": {
                                "Fn::Base64": {
                                    "Fn::Sub": "#!/bin/bash\nset -o xtrace\n/etc/eks/bootstrap.sh ${EKSName} ${BootstrapArguments}\n"
                                }
                            },
                            "securityGroupIds": [{
                                "Fn::If": [
                                    "NewSG", 
                                    {
                                        "Ref": "NodeSecurityGroup"
                                    }, 
                                    {
                                        "Ref": "ExistingNodesSecurityGroupsIds"
                                    }
                                ]
                            }],
                            "iamInstanceProfile": {
                                "arn": {
                                    "Fn::If": [
                                        "NewRole", 
                                        {
                                            "Fn::GetAtt": [
                                                "NodeInstanceProfile", 
                                                "Arn"
                                            ]
                                        }, 
                                        {
                                            "Ref": "ProfileRole"
                                        }
                                    ]
                                }
                            }, 
                            "keyPair": {
                                "Ref": "KeyName"
                            }, 
                            "tags": [
                                {
                                    "tagKey": "Name", 
                                    "tagValue": {
                                        "Fn::Sub": "${EKSName}-${OceanName}-Node"
                                    }
                                }, 
                                {
                                    "tagKey": {
                                        "Fn::Sub": "kubernetes.io/cluster/${EKSName}"
                                    }, 
                                    "tagValue": "owned"
                                }
                            ]
                        }
                    }
                }
            }
        }
    },
    "Outputs": {

        "1UpdateKubeconfig": {
            "Description": "Run this command to update kubectl config", 
            "Value": {
                "Fn::Sub": "aws eks update-kubeconfig --name ${EKSName}" 
            }
        },
        "NodeInstanceRole": {
            "Condition": "NewRole", 
            "Description": "The node instance role", 
            "Value": {
                "Fn::GetAtt": [
                    "NodeInstanceRole", 
                    "Arn"
                ]
            }
        },
        "EKSCluster": {
            "Description": "A reference to the EKS cluster",
            "Value": {
                "Ref": "EKSName"
            }
        },
        "EKSarn": {
            "Condition": "CreateEKSCluster",
            "Description": "ARN of the EKS CLuster", 
            "Value": {
                "Fn::GetAtt": [
                    "EKSCluster", 
                    "Arn"
                ]
            }
        }, 
        "EKSca": {
            "Condition": "CreateEKSCluster",
            "Description": "certificate authority data of the EKS CLuster", 
            "Value": {
                "Fn::GetAtt": [
                    "EKSCluster", 
                    "CertificateAuthorityData"
                ]
            }
        }, 
        "EKSendpoint": {
            "Condition": "CreateEKSCluster",
            "Description": "api endpoint for the EKS CLuster", 
            "Value": {
                "Fn::GetAtt": [
                    "EKSCluster", 
                    "Endpoint"
                ]
            }
        }
    }
}