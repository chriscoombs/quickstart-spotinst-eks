AWSTemplateFormatVersion: '2010-09-09'
Description: 'EKS cluster and Spotinst Ocean for the EKS nodes (qs-1pi1upt0b) License:
  Apache 2.0 (Please do not remove) May,1,2019'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Amazon EKS configuration
        Parameters:
          - NewEKS
          - EKSName
          - EKSVersion
          - NewOrExistingRole
          - ProfileRole
          - NewOrExistingNodesSG
          - ExistingNodesSecurityGroupsIds
          - ExistingControlPlaneSecurityGroup
          - EKSAMIType
          - BootstrapArguments
      - Label:
          default: Network configuration
        Parameters:
          - VPC
          - SubnetIds
      - Label:
          default: Spotinst configuration
        Parameters:
          - AccountID
          - AccessToken
      - Label:
          default: Ocean configuration
        Parameters:
          - OceanName
          - KeyName
          - ResourceLimitsCPU
          - ResourceLimitsMemory
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3BucketRegion
          - QSS3KeyPrefix
    ParameterLabels:
      OceanName:
        default: Ocean cluster name
      AccessToken:
        default: Spotinst access token
      AccountID:
        default: Spotinst account ID
      VPC:
        default: VPC
      SubnetIds:
        default: Subnet IDs
      KeyName:
        default: Key pair name
      NewOrExistingNodesSG:
        default: New or existing EKS nodes security group
      ExistingNodesSecurityGroupsIds:
        default: Existing nodes security group IDs
      ExistingControlPlaneSecurityGroup:
        default: Control plane security group
      EKSName:
        default: EKS name
      EKSVersion:
        default: EKS version
      NewEKS:
        default: New or existing EKS cluster
      NewOrExistingRole:
        default: New or existing EKS instance profile role
      ProfileRole:
        default: Existing EKS profile role ARN
      EKSAMIType:
        default: Regular or GPU EKS AMI
      BootstrapArguments:
        default: Bootstrap arguments for EKS nodes
      ResourceLimitsCPU:
        default: CPU limit for Ocean cluster nodes
      ResourceLimitsMemory:
        default: Memory limit for Ocean cluster nodes
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3BucketRegion:
        default: Quick Start S3 bucket region
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
Parameters:
  OceanName:
    Type: String
    Description: Name of the Ocean cluster.
  AccessToken:
    Type: String
    Description: Spotinst API Token.
  AccountID:
    Type: String
    Description: Spotinst Account ID.
  ResourceLimitsCPU:
    Type: Number
    Description: Maximun Amount of CPU cores in the Cluster
    Default: '2000'
  ResourceLimitsMemory:
    Type: Number
    Description: Maximun Amount of Memory (Gib) in the Cluster
    Default: '4000'
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: The VPC for the Elastigroup.
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Provde Subnet IDs for the Cluster (Must be from selected VPC)
  KeyName:
    Description: Provide an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  ExistingNodesSecurityGroupsIds:
    Type: CommaDelimitedList
    Default: ''
    Description: A comma-separated list of exsiting nodes security group IDs.
  NewOrExistingNodesSG:
    Type: String
    Default: New
    Description: New or existing EKS Nodes Security Group
    AllowedValues:
      - New
      - Existing
  EKSName:
    Description: A name for the Amazon EKS cluster.
    Type: String
  EKSVersion:
    Description: Amazon EKS Version.
    Type: String
    AllowedValues:
      - '1.14'
      - '1.13'
    Default: '1.14'
  NewEKS:
    Description: Use an existing Amazon EKS cluster or create a new one.
    Type: String
    AllowedValues:
      - New Cluster
      - Existing Cluster
    Default: New Cluster
  NewOrExistingRole:
    Type: String
    Default: New
    Description: New Node Instance Profile Role for EKS Nodes existing one
    AllowedValues:
      - New
      - Existing
  EKSAMIType:
    Type: String
    Default: Regular
    Description: Use Regular or GPU AMI for nodes (GPU AMI Supports only p2 and p3
      instance)
    AllowedValues:
      - Regular
      - GPU
  ProfileRole:
    Type: String
    Default: ''
    Description: If Using an Existing Instance Profile, provide its ARN
  BootstrapArguments:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh
      in https://github.com/awslabs/amazon-eks-ami
    Default: ''
    Type: String
  ExistingControlPlaneSecurityGroup:
    Type: String
    Default: ''
    Description: EKS cluster control plane security group ID (if creating new security
      group for nodes with existing EKS Cluster)
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: 'The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.'
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-spotinst-eks/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
Mappings:
  EKSVersionMap:
    '1.14':
      STD: AMZNEKS114
      GPU: AMZNEKS114GPU
    '1.13':
      STD: AMZNEKS113
      GPU: AMZNEKS113GPU
  AMITypesMap:
    Regular:
      Type: STD
    GPU:
      Type: GPU
  AWSAMIRegionMap:
    AMI:
      AMZNEKS114: amazon-eks-node-1.14-v20??????
      AMZNEKS114GPU: amazon-eks-gpu-node-1.14-v20??????
      AMZNEKS113: amazon-eks-node-1.13-v20??????
      AMZNEKS113GPU: amazon-eks-gpu-node-1.13-v20??????
    ap-northeast-1:
      AMZNEKS114: ami-07296175bc6b826a5
      AMZNEKS114GPU: ami-0e4846cf3cb2440e5
      AMZNEKS113: ami-091dd4fc36f238059
      AMZNEKS113GPU: ami-0f0b710ce601d5a06
    ap-northeast-2:
      AMZNEKS114: ami-0fa890749e8c893c0
      AMZNEKS114GPU: ami-0bfd27f77f9bf86b37
      AMZNEKS113: ami-01eb7af276f43d03d
      AMZNEKS113GPU: ami-06cc9975bcb45fae3
    ap-southeast-1:
      AMZNEKS114: ami-024ce53b56277d5d5
      AMZNEKS114GPU: ami-024a58dc3e6f0d78b
      AMZNEKS113: ami-0c07dba3bf60e6ccd
      AMZNEKS113GPU: ami-002999b2f9103152a
    ap-southeast-2:
      AMZNEKS114: ami-029318fe7c3a1664b
      AMZNEKS114GPU: ami-0b24ff00f0fb4b71f
      AMZNEKS113: ami-0a83a14bcdd56d43d
      AMZNEKS113GPU: ami-04b5d21eabfea81e4
    eu-central-1:
      AMZNEKS114: ami-07034b303e1ffc843
      AMZNEKS114GPU: ami-08b45c59715f94f5f
      AMZNEKS113: ami-0085eefa9ec412d21
      AMZNEKS113GPU: ami-071b676ce3b3b343e
    eu-north-1:
      AMZNEKS114: ami-0faf5ca58065599bc
      AMZNEKS114GPU: ami-06f065fbe98f1b3a5
      AMZNEKS113: ami-0dec739645f0ac8c9
      AMZNEKS113GPU: ami-092b38a91b1c63089
    eu-west-1:
      AMZNEKS114: ami-0b9d2c11b47bd8264
      AMZNEKS114GPU: ami-03b8e736123fd2b9b
      AMZNEKS113: ami-03772b2e67db0c87b
      AMZNEKS113GPU: ami-0238f5c2b74750b14
    us-east-1:
      AMZNEKS114: ami-087a82f6b78a07557
      AMZNEKS114GPU: ami-0730212bffaa1732a
      AMZNEKS113: ami-002ee751a46c73abc
      AMZNEKS113GPU: ami-0be4d1a45d5336fc9
    us-east-2:
      AMZNEKS114: ami-080fbb09ee2d4d3fa
      AMZNEKS114GPU: ami-095e1b9737cfe76bc
      AMZNEKS113: ami-07f54fc065c3da9d7
      AMZNEKS113GPU: ami-0c8d3734ac06376e4
    us-west-2:
      AMZNEKS114: ami-0c13bb9cbfd007e56
      AMZNEKS114GPU: ami-0ad9a8dc09680cfc2
      AMZNEKS113: ami-09bcf0b1f5b446c5d
      AMZNEKS113GPU: ami-0baa09d4698a02910
Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  CreateEKSCluster: !Equals
    - !Ref 'NewEKS'
    - New Cluster
  NewRole: !Equals
    - !Ref 'NewOrExistingRole'
    - New
  NewSG: !Equals
    - !Ref 'NewOrExistingNodesSG'
    - New
Resources:
  LambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        !Sub
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/copy_lambda.template.yaml'
          - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        QSS3BucketName: !Ref 'QSS3BucketName'
        QSS3BucketRegion: !Ref 'QSS3BucketRegion'
        QSS3KeyPrefix: !Ref 'QSS3KeyPrefix'
  EKSIAMRole:
    Condition: CreateEKSCluster
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
      Path: /
      RoleName: !Sub '${EKSName}-Role'
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateEKSCluster
    Properties:
      Tags:
        - Key: Name
          Value: eks-control-plane-SG
        - Key: !Sub 'kubernetes.io/cluster/${EKSName}'
          Value: owned
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref 'VPC'
  EKSCluster:
    Type: AWS::EKS::Cluster
    Condition: CreateEKSCluster
    Properties:
      Name: !Ref 'EKSName'
      Version: !Ref 'EKSVersion'
      RoleArn: !GetAtt 'EKSIAMRole.Arn'
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref 'ControlPlaneSecurityGroup'
        SubnetIds: !Ref 'SubnetIds'
    DependsOn:
      - EKSIAMRole
      - ControlPlaneSecurityGroup
  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: NewRole
    Properties:
      Path: /
      Roles:
        - !Ref 'NodeInstanceRole'
    DependsOn:
      - NodeInstanceRole
  NodeInstanceRole:
    Type: AWS::IAM::Role
    Condition: NewRole
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: NewSG
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: eks-nodes-SG
        - Key: !Sub 'kubernetes.io/cluster/${EKSName}'
          Value: owned
  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: NewSG
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      GroupId: !Ref 'NodeSecurityGroup'
      SourceSecurityGroupId: !Ref 'NodeSecurityGroup'
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535
  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: NewSG
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the
        cluster control plane
      GroupId: !Ref 'NodeSecurityGroup'
      SourceSecurityGroupId: !If
        - CreateEKSCluster
        - !Ref 'ControlPlaneSecurityGroup'
        - !Ref 'ExistingControlPlaneSecurityGroup'
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535
  ControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: NewSG
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet
        and pods
      GroupId: !If
        - CreateEKSCluster
        - !Ref 'ControlPlaneSecurityGroup'
        - !Ref 'ExistingControlPlaneSecurityGroup'
      DestinationSecurityGroupId: !Ref 'NodeSecurityGroup'
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535
  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: NewSG
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive
        communication from cluster control plane
      GroupId: !Ref 'NodeSecurityGroup'
      SourceSecurityGroupId: !If
        - CreateEKSCluster
        - !Ref 'ControlPlaneSecurityGroup'
        - !Ref 'ExistingControlPlaneSecurityGroup'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: NewSG
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with pods running
        extension API servers on port 443
      GroupId: !If
        - CreateEKSCluster
        - !Ref 'ControlPlaneSecurityGroup'
        - !Ref 'ExistingControlPlaneSecurityGroup'
      DestinationSecurityGroupId: !Ref 'NodeSecurityGroup'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  ControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: NewSG
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId: !If
        - CreateEKSCluster
        - !Ref 'ControlPlaneSecurityGroup'
        - !Ref 'ExistingControlPlaneSecurityGroup'
      SourceSecurityGroupId: !Ref 'NodeSecurityGroup'
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
  SpotinstOcean:
    Type: Custom::ocean
    DependsOn: LambdaStack
    Properties:
      ServiceToken: !GetAtt 'LambdaStack.Outputs.SpotinstLambda'
      accessToken: !Ref 'AccessToken'
      accountId: !Ref 'AccountID'
      ocean:
        name: !Ref 'OceanName'
        controllerClusterId: !Ref 'OceanName'
        region: !Ref 'AWS::Region'
        autoScaler:
          isEnabled: true
          cooldown: 180
          resourceLimits:
            maxMemoryGib: !Ref 'ResourceLimitsMemory'
            maxVCpu: !Ref 'ResourceLimitsCPU'
          down:
            evaluationPeriods: 3
          headroom:
            cpuPerUnit: 0
            memoryPerUnit: 0
            numOfUnits: 0
          isAutoConfig: true
        capacity:
          minimum: 1
          maximum: 1000
          target: 1
        strategy:
          spotPercentage: 100
          fallbackToOd: true
          utilizeReservedInstances: false
        compute:
          subnetIds: !Ref 'SubnetIds'
          launchSpecification:
            imageId: !FindInMap
              - AWSAMIRegionMap
              - !Ref 'AWS::Region'
              - !FindInMap
                - EKSVersionMap
                - !Ref 'EKSVersion'
                - !FindInMap
                  - AMITypesMap
                  - !Ref 'EKSAMIType'
                  - Type
            userData: !Base64
              Fn::Sub: "#!/bin/bash\nset -o xtrace\n/etc/eks/bootstrap.sh ${EKSName}\
                \ ${BootstrapArguments}\n"
            securityGroupIds:
              - !If
                - NewSG
                - !Ref 'NodeSecurityGroup'
                - !Ref 'ExistingNodesSecurityGroupsIds'
            iamInstanceProfile:
              arn: !If
                - NewRole
                - !GetAtt 'NodeInstanceProfile.Arn'
                - !Ref 'ProfileRole'
            keyPair: !Ref 'KeyName'
            tags:
              - tagKey: Name
                tagValue: !Sub '${EKSName}-${OceanName}-Node'
              - tagKey: !Sub 'kubernetes.io/cluster/${EKSName}'
                tagValue: owned
Outputs:
  1UpdateKubeconfig:
    Description: Run this command to update kubectl config
    Value: !Sub 'aws eks update-kubeconfig --name ${EKSName}'
  2UpdateConfigMap:
    Description: Run this command to create configmap to allow nodes to join the cluster
    Value: !Sub 'curl -O https://amazon-eks.s3-us-west-2.amazonaws.com/cloudformation/2019-01-09/aws-auth-cm.yaml;
      sed -i .bak ''s/<ARN of instance role (not instance profile)>/${NodeInstanceRole.Arn}/''
      aws-auth-cm.yaml'
  3ApplyConfigMap:
    Description: Run this command to apply the config map
    Value: !Sub 'kubectl apply -f aws-auth-cm.yaml'
  4InstallSpotinstController:
    Description: Run this command to apply the config map
    Value: !Sub 'curl -fsSL http://spotinst-public.s3.amazonaws.com/integrations/kubernetes/cluster-controller/scripts/init.sh
      | SPOTINST_TOKEN=${AccessToken} SPOTINST_ACCOUNT=${AccountID} SPOTINST_CLUSTER_IDENTIFIER=${EKSName}
      bash'
  NodeInstanceRole:
    Condition: NewRole
    Description: The node instance role
    Value: !GetAtt 'NodeInstanceRole.Arn'
  EKSCluster:
    Description: A reference to the EKS cluster
    Value: !Ref 'EKSName'
  EKSarn:
    Condition: CreateEKSCluster
    Description: ARN of the EKS CLuster
    Value: !GetAtt 'EKSCluster.Arn'
  EKSca:
    Condition: CreateEKSCluster
    Description: certificate authority data of the EKS CLuster
    Value: !GetAtt 'EKSCluster.CertificateAuthorityData'
  EKSendpoint:
    Condition: CreateEKSCluster
    Description: api endpoint for the EKS CLuster
    Value: !GetAtt 'EKSCluster.Endpoint'
